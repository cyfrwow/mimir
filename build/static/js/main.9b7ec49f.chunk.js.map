{"version":3,"sources":["MonacoEditor.js","toolbar/ToolbarButtonsBasicElements.js","toolbar/ToolbarButtonsBasicMarks.js","toolbar/ToolbarButtonsList.js","toolbar/ToolbarLinkElement.js","toolbar/ToolbarImageElement.js","toolbar/ToolbarButtonsTable.js","toolbar/ToolbarButtonsCodeMarks.js","toolbar/index.js","toolbar/Toolbar.js","plugins/basic.js","plugins/custom.js","plugins/format.js","plugins/toolbar.js","plugins/index.js","App.js","test.js","index.js"],"names":["MonacoEditor","slateObject","editorRef","useRef","useEffect","current","getAction","run","className","height","options","wordWrap","defaultLanguage","onMount","editor","monaco","setTimeout","value","JSON","stringify","ToolbarButtonsBasicElements","useStoreEditorRef","useEventEditorId","type","getSlatePluginType","ELEMENT_DEFAULT","icon","ELEMENT_H1","ELEMENT_H2","ELEMENT_H3","ELEMENT_H4","ELEMENT_H5","ELEMENT_H6","ToolbarButtonsBasicMarks","MARK_BOLD","MARK_ITALIC","MARK_UNDERLINE","MARK_STRIKETHROUGH","MARK_SUPERSCRIPT","clear","MARK_SUBSCRIPT","ToolbarButtonsList","ELEMENT_UL","ELEMENT_OL","ToolbarLinkElement","ToolbarImageElement","ToolbarButtonsTable","transform","insertTable","deleteTable","addRow","deleteRow","addColumn","deleteColumn","ToolbarButtonsCodeMarks","MARK_CODE","ELEMENT_BLOCKQUOTE","ELEMENT_CODE_BLOCK","Toolbar","plugins","createReactPlugin","createHistoryPlugin","createParagraphPlugin","createBlockquotePlugin","createCodeBlockPlugin","createHeadingPlugin","createBoldPlugin","createItalicPlugin","createUnderlinePlugin","createStrikethroughPlugin","createSubscriptPlugin","createSuperscriptPlugin","ELEMENT_HR","pluginKeys","renderElement","props","element","preFormat","unwrapList","optionsSoftBreakPlugin","rules","hotkey","query","allow","ELEMENT_TD","resetBlockTypesCommonRule","types","ELEMENT_TODO_LI","defaultType","ELEMENT_PARAGRAPH","optionsResetBlockTypePlugin","predicate","isBlockAboveEmpty","isSelectionAtBlockStart","optionsExitBreakPlugin","before","start","end","KEYS_HEADING","optionsAutoformat","markup","ELEMENT_LI","format","selection","parentEntry","getParent","node","isElement","isType","ELEMENT_CODE_LINE","toggleList","between","mode","insertTrigger","trigger","triggerAtBlockStart","insertEmptyCodeBlock","insertNodesOptions","select","createResetNodePlugin","createSoftBreakPlugin","createExitBreakPlugin","createAutoformatPlugin","createTrailingBlockPlugin","createBasicElementPlugins","createBasicMarkPlugins","createLinkPlugin","createListPlugin","createImagePlugin","createTablePlugin","createSelectOnBackspacePlugin","ELEMENT_IMAGE","pluginsBasic","pluginsFormat","pluginsToolbar","pluginsCustom","components","createSlatePluginsComponents","createSlatePluginsOptions","App","id","useMemo","createEditorPlugins","initialValue","children","deserializeHTMLToDocumentFragment","useState","setValue","htmlValue","setHtmlValue","html","serializeHTMLFromNodes","nodes","autofocus","editableProps","placeholder","style","padding","onChange","newValue","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b7ec49f.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport Editor from \"@monaco-editor/react\";\n\nexport default function MonacoEditor({ slateObject }) {\n  const editorRef = useRef(null);\n\n  useEffect(() => {\n    editorRef.current &&\n      editorRef.current.getAction(\"editor.action.formatDocument\").run();\n  }, [slateObject]);\n\n  const editorDidMount = (editor, monaco) => {\n    editorRef.current = editor;\n    setTimeout(function () {\n      editor.getAction(\"editor.action.formatDocument\").run();\n    }, 200);\n  };\n\n  return (\n    <div className=\"column\">\n      <h4>Slate To HTML</h4>\n      <Editor\n        height=\"90vh\"\n        className=\"editor\"\n        options={{ wordWrap: true }}\n        defaultLanguage=\"html\"\n        onMount={editorDidMount}\n        value={JSON.stringify(slateObject)}\n      />\n    </div>\n  );\n}\n","import {\n  useStoreEditorRef,\n  useEventEditorId,\n  getSlatePluginType,\n  ToolbarElement,\n  ELEMENT_DEFAULT,\n  ELEMENT_H1,\n  ELEMENT_H2,\n  ELEMENT_H3,\n  ELEMENT_H4,\n  ELEMENT_H5,\n  ELEMENT_H6,\n} from \"@udecode/slate-plugins\";\n\n// import Select from \"react-select\";\n\n// const customStyles = {\n//   option: (provided, state) => ({\n//     ...provided,\n//     borderBottom: \"1px dotted pink\",\n//     color: state.isSelected ? \"red\" : \"blue\",\n//     padding: 20,\n//   }),\n//   control: () => ({\n//     // none of react-select's styles are passed to <Control />\n//     width: 150,\n//   }),\n//   singleValue: (provided, state) => {\n//     const opacity = state.isDisabled ? 0.5 : 1;\n//     const transition = \"opacity 300ms\";\n\n//     return { ...provided, opacity, transition };\n//   },\n// };\nexport const ToolbarButtonsBasicElements = () => {\n  const editor = useStoreEditorRef(useEventEditorId(\"focus\"));\n\n  //   const options = [\n  //     {\n  //       value: (\n  //         <ToolbarElement\n  //           type={getSlatePluginType(editor, ELEMENT_DEFAULT)}\n  //           icon={\"P\"}\n  //         />\n  //       ),\n  //       label: \"Normal\",\n  //     },\n  //     {\n  //       value: (\n  //         <ToolbarElement\n  //           type={getSlatePluginType(editor, ELEMENT_H1)}\n  //           icon={\"H1\"}\n  //         />\n  //       ),\n  //       label: \"Heading 1\",\n  //     },\n  //     {\n  //       value: (\n  //         <ToolbarElement\n  //           type={getSlatePluginType(editor, ELEMENT_H2)}\n  //           icon={\"H2\"}\n  //         />\n  //       ),\n  //       label: \"Heading 2\",\n  //     },\n  //     {\n  //       value: (\n  //         <ToolbarElement\n  //           type={getSlatePluginType(editor, ELEMENT_H3)}\n  //           icon={\"H3\"}\n  //         />\n  //       ),\n  //       label: \"Heading 3\",\n  //     },\n  //     {\n  //       value: (\n  //         <ToolbarElement\n  //           type={getSlatePluginType(editor, ELEMENT_H4)}\n  //           icon={\"H4\"}\n  //         />\n  //       ),\n  //       label: \"Heading 4\",\n  //     },\n  //     {\n  //       value: (\n  //         <ToolbarElement\n  //           type={getSlatePluginType(editor, ELEMENT_H5)}\n  //           icon={\"H5\"}\n  //         />\n  //       ),\n  //       label: \"Heading 5\",\n  //     },\n  //     {\n  //       value: (\n  //         <ToolbarElement\n  //           type={getSlatePluginType(editor, ELEMENT_H6)}\n  //           icon={\"H6\"}\n  //         />\n  //       ),\n  //       label: \"Heading 6\",\n  //     },\n  //   ];\n\n  return (\n    <>\n      {/* <Select options={options} styles={customStyles} /> */}\n      <ToolbarElement\n        type={getSlatePluginType(editor, ELEMENT_DEFAULT)}\n        icon={\"P\"}\n      />\n      <ToolbarElement\n        type={getSlatePluginType(editor, ELEMENT_H1)}\n        icon={\"H1\"}\n      />\n      <ToolbarElement\n        type={getSlatePluginType(editor, ELEMENT_H2)}\n        icon={\"H2\"}\n      />\n      <ToolbarElement\n        type={getSlatePluginType(editor, ELEMENT_H3)}\n        icon={\"H3\"}\n      />\n      <ToolbarElement\n        type={getSlatePluginType(editor, ELEMENT_H4)}\n        icon={\"H4\"}\n      />\n      <ToolbarElement\n        type={getSlatePluginType(editor, ELEMENT_H5)}\n        icon={\"H5\"}\n      />\n      <ToolbarElement\n        type={getSlatePluginType(editor, ELEMENT_H6)}\n        icon={\"H6\"}\n      />\n    </>\n  );\n};\n","import {\n  useStoreEditorRef,\n  useEventEditorId,\n  getSlatePluginType,\n  ToolbarMark,\n  MARK_BOLD,\n  MARK_ITALIC,\n  MARK_UNDERLINE,\n  MARK_STRIKETHROUGH,\n  MARK_SUBSCRIPT,\n  MARK_SUPERSCRIPT,\n} from \"@udecode/slate-plugins\";\n\nexport const ToolbarButtonsBasicMarks = () => {\n  const editor = useStoreEditorRef(useEventEditorId(\"focus\"));\n\n  return (\n    <>\n      <ToolbarMark type={getSlatePluginType(editor, MARK_BOLD)} icon={\"B\"} />\n      <ToolbarMark\n        type={getSlatePluginType(editor, MARK_ITALIC)}\n        icon={<i>I</i>}\n      />\n      <ToolbarMark\n        type={getSlatePluginType(editor, MARK_UNDERLINE)}\n        icon={<u>U</u>}\n      />\n      <ToolbarMark\n        type={getSlatePluginType(editor, MARK_STRIKETHROUGH)}\n        icon={<del>S</del>}\n      />\n      <ToolbarMark\n        type={getSlatePluginType(editor, MARK_SUPERSCRIPT)}\n        clear={getSlatePluginType(editor, MARK_SUBSCRIPT)}\n        icon={\"sup\"}\n      />\n      <ToolbarMark\n        type={getSlatePluginType(editor, MARK_SUBSCRIPT)}\n        clear={getSlatePluginType(editor, MARK_SUPERSCRIPT)}\n        icon={\"sub\"}\n      />\n    </>\n  );\n};\n","import {\n  useStoreEditorRef,\n  useEventEditorId,\n  getSlatePluginType,\n  ToolbarList,\n  ELEMENT_UL,\n  ELEMENT_OL,\n} from \"@udecode/slate-plugins\";\nexport const ToolbarButtonsList = () => {\n  const editor = useStoreEditorRef(useEventEditorId(\"focus\"));\n  return (\n    <>\n      <span className=\"toolbar__button\">\n        <ToolbarList\n          type={getSlatePluginType(editor, ELEMENT_UL)}\n          icon={\"UL\"}\n        />\n      </span>\n      <span className=\"toolbar__button\">\n        <ToolbarList\n          type={getSlatePluginType(editor, ELEMENT_OL)}\n          icon={\"OL\"}\n        />\n      </span>\n    </>\n  );\n};\n","import { ToolbarLink } from \"@udecode/slate-plugins\";\nexport const ToolbarLinkElement = () => {\n  return <ToolbarLink icon={\"A\"} />;\n};\n","import { ToolbarImage } from \"@udecode/slate-plugins\";\nexport const ToolbarImageElement = () => {\n  return <ToolbarImage icon={\"Img\"} />;\n};\n","import {\n  ToolbarTable,\n  insertTable,\n  deleteTable,\n  addRow,\n  addColumn,\n  deleteRow,\n  deleteColumn,\n} from \"@udecode/slate-plugins\";\nexport const ToolbarButtonsTable = () => (\n  <>\n    <ToolbarTable icon={\"+T\"} transform={insertTable} />\n    <ToolbarTable icon={\"-T\"} transform={deleteTable} />\n    <ToolbarTable icon={\"+R\"} transform={addRow} />\n    <ToolbarTable icon={\"-R\"} transform={deleteRow} />\n    <ToolbarTable icon={\"+C\"} transform={addColumn} />\n    <ToolbarTable icon={\"-C\"} transform={deleteColumn} />\n  </>\n);\n","import {\n  useStoreEditorRef,\n  useEventEditorId,\n  getSlatePluginType,\n  ToolbarMark,\n  ToolbarElement,\n  ToolbarCodeBlock,\n  MARK_CODE,\n  ELEMENT_BLOCKQUOTE,\n  ELEMENT_CODE_BLOCK,\n} from \"@udecode/slate-plugins\";\n\nexport const ToolbarButtonsCodeMarks = () => {\n  const editor = useStoreEditorRef(useEventEditorId(\"focus\"));\n  return (\n    <>\n      <ToolbarMark type={getSlatePluginType(editor, MARK_CODE)} icon={\"<>\"} />\n      <ToolbarElement\n        type={getSlatePluginType(editor, ELEMENT_BLOCKQUOTE)}\n        icon={'\"\"'}\n      />\n      <ToolbarCodeBlock\n        type={getSlatePluginType(editor, ELEMENT_CODE_BLOCK)}\n        icon={\"[]\"}\n      />\n    </>\n  );\n};\n","import { ToolbarButtonsBasicElements } from \"./ToolbarButtonsBasicElements\";\nimport { ToolbarButtonsBasicMarks } from \"./ToolbarButtonsBasicMarks\";\nimport { ToolbarButtonsList } from \"./ToolbarButtonsList\";\nimport { ToolbarLinkElement } from \"./ToolbarLinkElement\";\nimport { ToolbarImageElement } from \"./ToolbarImageElement\";\nimport { ToolbarButtonsTable } from \"./ToolbarButtonsTable\";\nimport { ToolbarButtonsCodeMarks } from \"./ToolbarButtonsCodeMarks\";\nimport { Toolbar } from \"./Toolbar\";\n\nexport default Toolbar;\n\nexport {\n  ToolbarButtonsBasicElements,\n  ToolbarButtonsBasicMarks,\n  ToolbarButtonsCodeMarks,\n  ToolbarButtonsList,\n  ToolbarLinkElement,\n  ToolbarImageElement,\n  ToolbarButtonsTable,\n};\n","import {\n  ToolbarButtonsBasicElements,\n  ToolbarButtonsBasicMarks,\n  ToolbarButtonsList,\n  ToolbarLinkElement,\n  ToolbarImageElement,\n  ToolbarButtonsTable,\n  ToolbarButtonsCodeMarks,\n} from \"./index\";\nexport const Toolbar = () => {\n  return (\n    <header className=\"toolbar\">\n      <ul className=\"toolbar__list\">\n        <li className=\"toolbar__listitem\">\n          <ToolbarButtonsBasicElements />\n        </li>\n        <li className=\"toolbar__listitem\">\n          <ToolbarButtonsBasicMarks />\n          <ToolbarButtonsCodeMarks />\n        </li>\n        <li className=\"toolbar__listitem\">\n          <ToolbarButtonsList />\n        </li>\n        <li className=\"toolbar__listitem\">\n          <ToolbarButtonsTable />\n          <ToolbarLinkElement />\n          <ToolbarImageElement />\n        </li>\n      </ul>\n    </header>\n  );\n};\n","import {\n  createReactPlugin,\n  createHistoryPlugin,\n  createParagraphPlugin,\n  createBlockquotePlugin,\n  createCodeBlockPlugin,\n  createHeadingPlugin,\n  createBoldPlugin,\n  createItalicPlugin,\n  createUnderlinePlugin,\n  createStrikethroughPlugin,\n  createSubscriptPlugin,\n  createSuperscriptPlugin,\n} from \"@udecode/slate-plugins\";\n\nconst plugins = [\n  // editor\n  createReactPlugin(), // withReact\n  createHistoryPlugin(), // withHistory\n\n  // elements\n  createParagraphPlugin(), // paragraph element\n  createBlockquotePlugin(), // blockquote element\n  createCodeBlockPlugin(), // code block element\n  createHeadingPlugin(), // heading elements\n\n  // marks - bold, italic, underline, strikethrough, sub, sup, code\n  createBoldPlugin,\n  createItalicPlugin,\n  createUnderlinePlugin,\n  createStrikethroughPlugin,\n  createSubscriptPlugin,\n  createSuperscriptPlugin,\n  createCodeBlockPlugin,\n];\n\nexport default plugins;\n","export const ELEMENT_HR = \"hr\";\n\nconst getThemacticBreakElement = () => (editor) => (props) => {\n  if (props.element.type === ELEMENT_HR) {\n    return <hr />;\n  }\n};\n\nfunction createThematicBreakPlugin() {\n  return {\n    pluginKeys: ELEMENT_HR,\n    renderElement: getThemacticBreakElement(),\n  };\n}\n\nconst plugins = [createThematicBreakPlugin()];\n\nexport default plugins;\n","import {\n  createResetNodePlugin,\n  createSoftBreakPlugin,\n  createExitBreakPlugin,\n  createAutoformatPlugin,\n  createTrailingBlockPlugin,\n  ELEMENT_PARAGRAPH,\n  ELEMENT_BLOCKQUOTE,\n  ELEMENT_CODE_BLOCK,\n  ELEMENT_TODO_LI,\n  ELEMENT_TD,\n  ELEMENT_H1,\n  ELEMENT_H2,\n  ELEMENT_H3,\n  ELEMENT_H4,\n  ELEMENT_H5,\n  ELEMENT_H6,\n  ELEMENT_LI,\n  ELEMENT_UL,\n  ELEMENT_OL,\n  ELEMENT_CODE_LINE,\n  ELEMENT_DEFAULT,\n  isElement,\n  isType,\n  getParent,\n  unwrapList,\n  toggleList,\n  isBlockAboveEmpty,\n  isSelectionAtBlockStart,\n  insertEmptyCodeBlock,\n  getSlatePluginType,\n  MARK_BOLD,\n  MARK_ITALIC,\n  MARK_UNDERLINE,\n  MARK_STRIKETHROUGH,\n  MARK_CODE,\n  KEYS_HEADING,\n} from \"@udecode/slate-plugins\";\nimport { ELEMENT_HR } from \"./custom\";\n\nconst preFormat = (editor) => unwrapList(editor);\n\nconst optionsSoftBreakPlugin = {\n  rules: [\n    { hotkey: \"shift+enter\" },\n    {\n      hotkey: \"enter\",\n      query: {\n        allow: [ELEMENT_CODE_BLOCK, ELEMENT_BLOCKQUOTE, ELEMENT_TD],\n      },\n    },\n  ],\n};\n\nconst resetBlockTypesCommonRule = {\n  types: [ELEMENT_BLOCKQUOTE, ELEMENT_TODO_LI],\n  defaultType: ELEMENT_PARAGRAPH,\n};\n\nconst optionsResetBlockTypePlugin = {\n  rules: [\n    {\n      ...resetBlockTypesCommonRule,\n      hotkey: \"Enter\",\n      predicate: isBlockAboveEmpty,\n    },\n    {\n      ...resetBlockTypesCommonRule,\n      hotkey: \"Backspace\",\n      predicate: isSelectionAtBlockStart,\n    },\n  ],\n};\n\nconst optionsExitBreakPlugin = {\n  rules: [\n    {\n      hotkey: \"mod+enter\",\n    },\n    {\n      hotkey: \"mod+shift+enter\",\n      before: true,\n    },\n    {\n      hotkey: \"enter\",\n      query: {\n        start: true,\n        end: true,\n        allow: KEYS_HEADING,\n      },\n    },\n  ],\n};\n\nconst optionsAutoformat = {\n  rules: [\n    {\n      type: ELEMENT_H1,\n      markup: \"#\",\n      preFormat,\n    },\n    {\n      type: ELEMENT_H2,\n      markup: \"##\",\n      preFormat,\n    },\n    {\n      type: ELEMENT_H3,\n      markup: \"###\",\n      preFormat,\n    },\n    {\n      type: ELEMENT_H4,\n      markup: \"####\",\n      preFormat,\n    },\n    {\n      type: ELEMENT_H5,\n      markup: \"#####\",\n      preFormat,\n    },\n    {\n      type: ELEMENT_H6,\n      markup: \"######\",\n      preFormat,\n    },\n    {\n      type: ELEMENT_HR,\n      markup: \"---\",\n    },\n    {\n      type: ELEMENT_LI,\n      markup: [\"*\", \"-\"],\n      preFormat,\n      format: (editor) => {\n        if (editor.selection) {\n          const parentEntry = getParent(editor, editor.selection);\n          if (!parentEntry) return;\n          const [node] = parentEntry;\n          if (\n            isElement(node) &&\n            !isType(editor, node, ELEMENT_CODE_BLOCK) &&\n            !isType(editor, node, ELEMENT_CODE_LINE)\n          ) {\n            toggleList(editor, {\n              type: ELEMENT_UL,\n            });\n          }\n        }\n      },\n    },\n    {\n      type: ELEMENT_LI,\n      markup: [\"1.\", \"1)\"],\n      format: (editor) => {\n        if (editor.selection) {\n          const parentEntry = getParent(editor, editor.selection);\n          if (!parentEntry) return;\n          const [node] = parentEntry;\n          if (\n            isElement(node) &&\n            !isType(editor, node, ELEMENT_CODE_BLOCK) &&\n            !isType(editor, node, ELEMENT_CODE_LINE)\n          ) {\n            toggleList(editor, {\n              type: ELEMENT_OL,\n            });\n          }\n        }\n      },\n    },\n    {\n      type: ELEMENT_TODO_LI,\n      markup: [\"[]\"],\n    },\n    {\n      type: ELEMENT_BLOCKQUOTE,\n      markup: [\">\"],\n      preFormat,\n    },\n    {\n      type: MARK_BOLD,\n      between: [\"**\", \"**\"],\n      mode: \"inline\",\n      insertTrigger: true,\n    },\n    {\n      type: MARK_UNDERLINE,\n      between: [\"__\", \"__\"],\n      mode: \"inline\",\n      insertTrigger: true,\n    },\n    {\n      type: MARK_ITALIC,\n      between: [\"*\", \"*\"],\n      mode: \"inline\",\n      insertTrigger: true,\n    },\n    {\n      type: MARK_CODE,\n      between: [\"`\", \"`\"],\n      mode: \"inline\",\n      insertTrigger: true,\n    },\n    {\n      type: MARK_STRIKETHROUGH,\n      between: [\"~~\", \"~~\"],\n      mode: \"inline\",\n      insertTrigger: true,\n    },\n    {\n      type: ELEMENT_CODE_BLOCK,\n      markup: \"``\",\n      trigger: \"`\",\n      triggerAtBlockStart: false,\n      preFormat,\n      format: (editor) => {\n        insertEmptyCodeBlock(editor, {\n          defaultType: getSlatePluginType(editor, ELEMENT_DEFAULT),\n          insertNodesOptions: { select: true },\n        });\n      },\n    },\n  ],\n};\n\nconst plugins = [\n  createResetNodePlugin(optionsResetBlockTypePlugin),\n  createSoftBreakPlugin(optionsSoftBreakPlugin),\n  createExitBreakPlugin(optionsExitBreakPlugin),\n  createAutoformatPlugin(optionsAutoformat),\n  createTrailingBlockPlugin({ type: ELEMENT_PARAGRAPH }),\n];\n\nexport default plugins;\n","import {\n  createBasicElementPlugins,\n  createBasicMarkPlugins,\n  createLinkPlugin,\n  createListPlugin,\n  createImagePlugin,\n  createTablePlugin,\n  createSelectOnBackspacePlugin,\n  ELEMENT_IMAGE,\n} from \"@udecode/slate-plugins\";\n\nconst plugins = [\n  ...createBasicElementPlugins(),\n  ...createBasicMarkPlugins(),\n  createLinkPlugin(),\n  createListPlugin(),\n  createImagePlugin(),\n  createTablePlugin(),\n  createSelectOnBackspacePlugin({ allow: [ELEMENT_IMAGE] }),\n];\n\nexport default plugins;\n","import pluginsBasic from \"./basic\";\nimport pluginsFormat from \"./format\";\nimport pluginsToolbar from \"./toolbar\";\nimport pluginsCustom from \"./custom\";\n\nconst plugins = [\n  ...pluginsBasic,\n  ...pluginsFormat,\n  ...pluginsToolbar,\n  ...pluginsCustom,\n];\n\nexport default plugins;\n","import { useState, useMemo, useEffect } from \"react\";\nimport MonacoEditor from \"./MonacoEditor\";\nimport {\n  SlatePlugins,\n  createEditorPlugins,\n  serializeHTMLFromNodes,\n  HeadingToolbar,\n  createSlatePluginsComponents,\n  createSlatePluginsOptions,\n  deserializeHTMLToDocumentFragment,\n} from \"@udecode/slate-plugins\";\nimport Toolbar from \"./toolbar\";\nimport plugins from \"./plugins\";\nimport htmlfile from \"./test\";\nimport \"./App.css\";\n\nconst components = createSlatePluginsComponents();\nconst options = createSlatePluginsOptions();\n\nfunction App() {\n  const id = \"slate-plugins-editor\";\n  const editor = useMemo(\n    () => createEditorPlugins({ id, plugins, options, components }),\n    []\n  );\n  const initialValue = useMemo(() => {\n    return [\n      {\n        children: deserializeHTMLToDocumentFragment(editor, {\n          plugins,\n          element: htmlfile,\n        }),\n      },\n    ];\n  }, [editor]);\n\n  const [value, setValue] = useState(initialValue);\n  const [htmlValue, setHtmlValue] = useState(\"\");\n\n  useEffect(() => {\n    if (value) {\n      const html = serializeHTMLFromNodes(editor, {\n        plugins,\n        nodes: value,\n      });\n      setHtmlValue(html);\n    }\n  }, [value, editor]);\n\n  function handleOnChange(slateObject) {\n    setValue(slateObject);\n  }\n\n  const editableProps = {\n    placeholder: \"Type…\",\n    style: {\n      padding: \"15px\",\n    },\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"column\">\n        <h4>Slate editor</h4>\n        <HeadingToolbar>\n          <Toolbar />\n        </HeadingToolbar>\n        <SlatePlugins\n          id={id}\n          plugins={plugins}\n          components={components}\n          options={options}\n          autofocus={true}\n          initialValue={value}\n          editableProps={editableProps}\n          onChange={(newValue) => handleOnChange(newValue)}\n        />\n      </div>\n      <div className=\"column\">\n        <MonacoEditor slateObject={htmlValue} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const html = `<div><h1 font-size=\"16\" class=\"sc-Axmtr iYzqgy\">Rendering on slate from HTML file</h1>\n  <p>\n    This example shows how to enforce your layout with domain-specific\n    constraints. This document will always have a title block at the top and a\n    trailing paragraph. Try deleting them and see what happens!\n  </p>\n  <p>\n    Slate editors can edit complex, nested data structures. And for the most\n    part this is great. But in certain cases inconsistencies in the data\n    structure can be introduced—most often when allowing a user to paste\n    arbitrary richtext content.\"Normalizing\" is how you can ensure that your\n    editor&#x27;s content is always of a certain shape. It&#x27;s similar to\n    \"validating\", except instead of just determining whether the content is\n    valid or invalid, its job is to fix the content to make it valid again.\n  </p>\n</div>\n<div><p>Deserialized paragraph here.</p></div>\n<div>\n  <p>\n    These are the basic marks. You can customize the type and component for each\n    of these.e\n  </p>\n  <p>\n    <strong>Bold, </strong><em>italic, </em><u>underline, </u\n    ><span class=\"sc-fznxsB cuxHyi strikethrough\">strikethrough, </span\n    ><strong>mixed, </strong><code class=\"sc-fzpjYC erRYCd\">line</code\n    ><sub>sub, </sub><sup>sup, </sup>\n    </p>\n    <pre><code>Code block</code></pre>\n</div>\n<div>\n  <p>\n    The Highlight plugin enables support for\n    <mark class=\"sc-fzoXzr gTaOAp\">highlights</mark>, useful when reviewing\n    content or highlighting it for future reference.\n  </p>\n</div>\n<div>\n  <h1 font-size=\"16\" class=\"sc-Axmtr iYzqgy\">Elements</h1>\n  <p>These are the most common elements, known as blocks:</p>\n  <h1 font-size=\"16\" class=\"sc-Axmtr iYzqgy\">Heading 1</h1>\n  <h2 font-size=\"16\" class=\"sc-AxmLO fxriFc\">Heading 2</h2>\n  <h3 font-size=\"16\" class=\"sc-fzozJi haooyy\">Heading 3</h3>\n  <h4 font-size=\"16\" class=\"sc-fzoLsD gEudmP\">Heading 4</h4>\n  <h5 font-size=\"16\" class=\"sc-fzpans fiNxFQ\">Heading 5</h5>\n  <h6 font-size=\"16\" class=\"sc-fzplWN heirJR\">Heading 6</h6>\n  <blockquote class=\"sc-AxgMl cTEzUq\">Blockquote</blockquote>\n  <pre class=\"sc-AxheI flKkIC\"><code>Code block</code></pre>\n</div>\n<div>\n  <ul class=\"sc-fznKkj iKBNUG\">\n    <li><p>Bulleted list</p></li>\n  </ul>\n  <ol class=\"sc-fznZeY dvlaqe\">\n    <li><p>Numbered list</p></li>\n  </ol>\n  <p>\n    With Slate you can build complex block types that have their own embedded\n    content and behaviors, like rendering checkboxes inside check list items!\n  </p>\n  <p>Try it out for yourself!</p>\n</div>\n<div>\n  <p>\n    Since the editor is based on a recursive tree model, similar to an HTML\n    document, you can create complex nested structures, like tables:\n  </p>\n  <table class=\"sc-fzqBZW dmVXSF\">\n    <tbody>\n      <tr>\n        <td class=\"sc-fzokOt hjmskT\"></td>\n        <td class=\"sc-fzokOt hjmskT\"><strong>Human</strong></td>\n        <td class=\"sc-fzokOt hjmskT\"><strong>Dog</strong></td>\n        <td class=\"sc-fzokOt hjmskT\"><strong>Cat</strong></td>\n      </tr>\n      <tr>\n        <td class=\"sc-fzokOt hjmskT\"><strong># of Feet</strong></td>\n        <td class=\"sc-fzokOt hjmskT\">2</td>\n        <td class=\"sc-fzokOt hjmskT\">4</td>\n        <td class=\"sc-fzokOt hjmskT\">4</td>\n      </tr>\n      <tr>\n        <td class=\"sc-fzokOt hjmskT\"><strong># of Lives</strong></td>\n        <td class=\"sc-fzokOt hjmskT\">1</td>\n        <td class=\"sc-fzokOt hjmskT\">1</td>\n        <td class=\"sc-fzokOt hjmskT\">9</td>\n      </tr>\n    </tbody>\n  </table>\n  <p>\n    This table is just a basic example of rendering a table, and it doesn&#x27;t\n    have fancy functionality. But you could augment it to add support for\n    navigating with arrow keys, displaying table headers, adding column and\n    rows, or even formulas if you wanted to get really crazy!\n  </p>\n</div>\n<div>\n  <p>\n    In addition to block nodes, you can create inline nodes, like\n    <a href=\"https://en.wikipedia.org/wiki/Hypertext\">hyperlinks</a>!\n  </p>\n  <p>\n    This example shows hyperlinks in action. It features two ways to add links.\n    You can either add a link via the toolbar icon above, or if you want in on a\n    little secret, copy a URL to your keyboard and paste it while a range of\n    text is selected.\n  </p>\n</div>\n<div>\n  <p>\n    In addition to nodes that contain editable text, you can also create other\n    types of nodes, like images or videos.\n  </p>\n  <div>\n    <div contenteditable=\"false\">\n      <img\n        src=\"https://source.unsplash.com/kFrdX5IeQzI\"\n        alt=\"\"\n        class=\"sc-fznyAO cilSGN\"\n      />\n    </div>\n  </div>\n  <p>\n    This example shows images in action. It features two ways to add images. You\n    can either add an image via the toolbar icon above, or if you want in on a\n    little secret, copy an image URL to your keyboard and paste it anywhere in\n    the editor!\n  </p>\n</div>\n<div>\n  <p>\n    In addition to simple image nodes, you can actually create complex embedded\n    nodes. For example, this one contains an input element that lets you change\n    the video being rendered!\n  </p>\n  <p>\n    Try it out! This editor is built to handle Vimeo embeds, but you could\n    handle any type.\n  </p>\n</div>\n`;\nexport default html;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}